package leetcode

func hammingDistance(x int, y int) int {
	count := 0
	dst := x ^ y
	for dst > 0 {
		if dst&1 == 1 {
			count++
		}
		dst >>= 1
	}

	return count
}

func hammingDistance2(x int, y int) int {
	z := x ^ y
	// 0x55555555 = 01010101 01010101 01010101 01010101
	// 将z以2个比特为一组，分别计算对应的1的个数，并将结果存入两个比特
	z = (z & 0x55555555) + ((z >> 1) & 0x55555555)
	// 0x33333333 = 00110011 00110011 00110011 00110011
	// 将结果分别存入4个比特
	z = (z & 0x33333333) + ((z >> 2) & 0x33333333)
	// 0x0F0F0F0F = 00001111 00001111 00001111 00001111
	// 将结果存入8个比特
	z = (z & 0x0f0f0f0f) + ((z >> 4) & 0x0f0f0f0f)
	// 0x00FF00FF = 00000000 11111111 00000000 11111111
	// 将结果存入16个比特
	z = (z & 0x00ff00ff) + ((z >> 8) & 0x00ff00ff)
	// 0x00FF00FF = 00000000 11111111 00000000 11111111
	// 将结果存入32个比特
	z = (z & 0x0000ffff) + ((z >> 16) & 0x0000ffff)

	return z
}
